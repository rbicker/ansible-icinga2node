---
# windows configuration

- name: find icinga2.exe path
  win_shell: "(Get-WmiObject win32_service | ?{$_.Name -like '*icinga*'} | select PathName).PathName"
  register: icinga2_win_pathname
  changed_when: no

- name: set path-facts
  set_fact:
    icinga2_exe_path: '{{ icinga2_win_pathname.stdout.split(''"'')[1] }}'
    icinga2_win_key_path: "{{ ansible_env.ProgramData }}\\icinga2\\etc\\icinga2\\pki\\{{ icinga2_node_endpoint }}.key"
    icinga2_win_crt_path: "{{ ansible_env.ProgramData }}\\icinga2\\etc\\icinga2\\pki\\{{ icinga2_node_endpoint }}.crt"
    icinga2_win_trusted_path: "{{ ansible_env.ProgramData }}\\icinga2\\etc\\icinga2\\pki\\trusted-master.crt"
    icinga2_win_ca_key_path: "{{ ansible_env.ProgramData }}\\icinga2\\var\\lib\\icinga2\\ca.key"
    icinga2_win_ca_crt_path: "{{ ansible_env.ProgramData }}\\icinga2\\var\\lib\\icinga2\\ca.crt"
    icinga2_win_constants_path: "{{ ansible_env.ProgramData }}\\icinga2\\etc\\icinga2\\constants.conf"

- name: get keyfile stats
  win_stat:
    path: "{{ icinga2_win_key_path }}"
  register: icinga2_win_keyfile_stat

- name: get trusted-master.crt stats
  win_stat:
    path: "{{ icinga2_win_trusted_path }}"
  register: icinga2_win_trusted_stat

- name: icinga2 pki ticket generation on keyserver (icinga2 pki ticket)
  command: icinga2 pki ticket --cn "{{ icinga2_node_endpoint }}"
  delegate_to: "{{ icinga2_caserver  }}"
  register: icinga2_pki_ticket
  when: not icinga2_win_keyfile_stat.stat.exists or icinga2_generate_keypair_force

- name: generate a new local self-signed certificate (icinga2 pki new-cert)
  win_shell: >-
    "{{ icinga2_exe_path }}"
    pki new-cert
    --cn {{ icinga2_node_endpoint }}
    --key {{ icinga2_win_key_path }}
    --cert {{ icinga2_win_crt_path }}
  args:
    executable: cmd
  when: not icinga2_win_keyfile_stat.stat.exists or icinga2_generate_keypair_force

- name: request master-certificate (icinga2 pki save-cert)
  win_shell: >-
    "{{ icinga2_exe_path }}"
    pki save-cert
    --key {{ icinga2_win_key_path }}
    --cert {{ icinga2_win_crt_path }}
    --trustedcert {{ icinga2_win_trusted_path }}
    --host {{ icinga2_parent_host }}
  args:
    executable: cmd
  when: not icinga2_win_trusted_stat.stat.exists or icinga2_generate_keypair_force

- name: finish node setup (icinga2 node setup)
  win_shell: >-
    "{{ icinga2_exe_path }}"
    node setup --cn {{ icinga2_node_endpoint }} --endpoint {{ icinga2_parent_endpoint }}
    --parent_host {{ icinga2_parent_host }},{{ icinga2_parent_port }}
    --trustedcert {{ icinga2_win_trusted_path }}
    --ticket {{ icinga2_pki_ticket.stdout }}
    --zone {{ icinga2_parent_zone }}
    --accept-config --accept-commands
  args:
    executable: cmd
  when: not icinga2_win_keyfile_stat.stat.exists or icinga2_generate_keypair_force

- name: ensure NodeName constant is set
  win_lineinfile:
    regexp: "^const NodeName"
    line: 'const NodeName = "{{ icinga2_node_endpoint }}"'
    path: "{{ icinga2_win_constants_path }}"

- name: ensure ZoneName constant is set
  win_lineinfile:
    regexp: "^const ZoneName"
    line: 'const ZoneName = "{{ icinga2_node_zone }}"'
    path: "{{ icinga2_win_constants_path }}"

- name: ensure TicketSalt constant is set
  win_lineinfile:
    regexp: "^const TicketSalt"
    line: 'const TicketSalt = "{{ icinga2_node_salt }}"'
    path: "{{ icinga2_win_constants_path }}"
  when: icinga2_node_salt is defined

- name: ensure icinga2.conf corresponds to template
  win_template:
    src: icinga2.conf.j2
    dest: "{{ ansible_env.ProgramData }}\\icinga2\\etc\\icinga2\\icinga2.conf"
    backup: yes
  notify: windows node restart icinga2 service

- name: ensure zones.conf corresponds to template
  win_template:
    src: zones.conf.j2
    dest: "{{ ansible_env.ProgramData }}\\icinga2\\etc\\icinga2\\zones.conf"
    backup: yes
  notify: windows node restart icinga2 service

- name: ensure ca.crt is in sync
  copy:
    content: "{{ ca_crt['content'] | b64decode }}"
    dest: "{{ icinga2_win_ca_crt_path }}"
  when: icinga2_node_sync_ca

- name: ensure ca.key is in sync
  copy:
    content: "{{ ca_key['content'] | b64decode }}"
    dest: "{{ icinga2_win_ca_key_path }}"
  when: icinga2_node_sync_ca

- name: ensure serial.txt is in sync
  copy:
    content: "{{ ca_serial['content'] | b64decode }}"
    dest: "{{ ansible_env.ProgramData }}\\icinga2\\var\\lib\\icinga2\\serial.txt"
  when: icinga2_node_sync_ca

- name: list icinga2 features
  win_shell: >-
    "{{ icinga2_exe_path }}"
    features list
  args:
    executable: cmd
  changed_when: no
  register: icinga2_features
  tags:
    - features

- name: create list of features to enable
  set_fact:
    # create a list of all features that are listed as disabled but configured as enabled
    icinga2_enable_features: "{{ item | regex_replace('^Disabled features:\\s*', '') | split(' ') | intersect(icinga2_node_features) }}"
  when: item | regex_search('^Disabled features:')
  with_items: "{{ icinga2_features.stdout_lines }}"
  tags:
    - features

- name: create list of features to disable
  set_fact:
    # create a list of all features that are listed as enabled but configured as disabled
    icinga2_disable_features: "{{ item | regex_replace('^Enabled features:\\s*', '') | split(' ') | intersect(icinga2_node_features_disable) }}"
  when: item | regex_search('^Enabled features:')
  with_items: "{{ icinga2_features.stdout_lines }}"
  tags:
    - features

- name: enable features
  win_shell: >-
    "{{ icinga2_exe_path }}"
    features enable {{ icinga2_enable_features | join(' ')  }}
  when:
    - icinga2_enable_features is defined
    - icinga2_enable_features | length > 0
  notify: windows node restart icinga2 service
  tags:
    - features

- name: disable features
  win_shell: >-
    "{{ icinga2_exe_path }}"
    features disable {{ icinga2_disable_features | join(' ')  }}
  when:
    - icinga2_disable_features is defined
    - icinga2_disable_features | length > 0
  notify: windows node restart icinga2 service
  tags:
    - features
